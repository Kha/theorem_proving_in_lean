#+Title: Theorem Proving in Lean
#+Author: [[http://www.andrew.cmu.edu/user/avigad][Jeremy Avigad]]

* Interacting with Lean

You are now familiar with the fundamentals of dependent type theory,
both as a language for defining mathematical objects and a language
for constructing proofs. The one thing you are missing is a mechanism
for defining new data types. We will fill this gap in the next chapter,
which introduces the notion of an /inductive data type/. But first, in
this chapter, we take a break from the mechanics of type theory to
explore some pragmatic aspects of interacting with Lean.

** Displaying Information
:PROPERTIES:
  :CUSTOM_ID: Displaying_Information
:END:

There are a number of ways in which you can query Lean for information
about its current state and the objects and theorems that are
available in the current context. You have already seen two of the
most common ones, =check= and =eval=. Remember that =check= is often
used in conjunction with the =@= operator, which makes all of the
arguments to a theorem or definition explicit. In addition, you can
use the =print= command to get information about any identifier. If
the identifier denotes a definition or theorem, Lean prints the type
of the symbol, and its definition. If it is a constant or an axiom,
Lean indicates that fact, and shows the type.
#+BEGIN_SRC lean
-- examples with equality
check eq
check @eq
check eq.symm
check @eq.symm

print eq.symm

-- examples with and
check and
check and.intro
check @and.intro

-- examples with addition
open nat
check add
check @add
eval add 3 2
print add

-- a user-defined function
definition foo {α : Type} (x : α) : α := x

check foo
check @foo
eval foo
eval (foo @nat.zero)
print foo
#+END_SRC

There are other useful =print= commands:
#+BEGIN_SRC text
print definition             : display definition
print inductive              : display an inductive type and its constructors
print notation               : display all notation
print notation <tokens>      : display notation using any of the tokens
print axioms                 : display assumed axioms
print options                : display options set by user or emacs mode
print prefix <namespace>     : display all declarations in the namespace
print classes                : display all classes
print instances <class name> : display all instances of the given class
print fields <structure>     : display all "fields" of a structure
#+END_SRC
We will discuss inductive types, structures, classes, instances in the
next four chapters. Here are examples of how these commands are used:
#+BEGIN_SRC lean
print notation
print notation + * -
print axioms
print options
print prefix nat
print prefix nat.le
print classes
print instances ring
print fields ring
#+END_SRC


The behavior of the generic print command is determined by its
argument, so that the following pairs of commands all do the same
thing.
#+BEGIN_SRC lean
print add
print definition add

print +
print notation +

print nat
print inductive nat

print group
print inductive group
#+END_SRC
Moreover, both =print group= and =print inductive group= recognize
that a group is a structure (see [[file:09_Structures_and_Records.org::#Structures_and_Records][Chapter 9]]), and so print the fields as
well.

** Setting Options
:PROPERTIES:
  :CUSTOM_ID: Setting_Options
:END:

Lean maintains a number of internal variables that can be set by users
to control its behavior. The syntax for doing so is as follows:
#+BEGIN_SRC text
set_option <name> <value>
#+END_SRC

One very useful family of options controls the way Lean's /pretty-
printer/ displays terms. The following options take an input of true
or false:
#+BEGIN_SRC text
pp.implicit  : display implicit arguments
pp.universes : display hidden universe parameters
pp.coercions : show coercions
pp.notation  : display output using defined notations
pp.beta      : beta reduce terms before displaying them
#+END_SRC
In Lean, /coercions/ can be inserted automatically to cast an element
of one data type to another, for example, to cast an element of =nat=
to an element of =int=. We will say more about them later in this
chapter.
# TODO: add back when implemented
# This list is not exhaustive; you can see a complete list by
# typing =set_option pp.= and then using tab-completion in the Lean
# mode for Emacs, also discussed below.

As an example, the following settings yield much longer output:
#+BEGIN_SRC lean
import data.nat
open nat

set_option pp.implicit true
set_option pp.universes true
set_option pp.notation false
set_option pp.numerals false

check 2 + 2 = 4
eval (λ x, x + 2) = (λ x, x + 3)
check (λ x, x + 1) 1

set_option pp.beta false
check (λ x, x + 1) 1
#+END_SRC
Pretty printing additional information is often very useful when you
are debugging a proof, or trying to understand a cryptic error
message. Too much information can be overwhelming, though, and Lean's
defaults are generally sufficient for ordinary interactions.

** Using the Library

To use Lean effectively you will inevitably need to make use of
definitions and theorems in the library. Recall that the =import=
command at the beginning of a file imports previously compiled results
from other files, and that importing is transitive; if you import
=foo= and =foo= imports =bar=, then the definitions and theorems from
=bar= are available to you as well. But the act of opening a namespace,
which provides shorter names,
does not carry over. In each file, you need to open the namespaces
you wish to use.

# TODO: what to say here? Will we keep "standard"? So far, we have
# probably only opened nat, and almost all the notation is defined at
# the top level.

# The command =import standard= imports the essential parts of the
# standard library, and by now you have seen many of the namespaces you
# will need. For example, you should =open nat= for notation when you
# are working with the natural numbers, and =open int= when you are
# working with the integers. 

In general, it is important for you to be familiar with the library
and its contents, so you know what theorems, definitions, notations,
and resources are available to you. Below we will see that Emacs'
Lean mode can also help you find things you need, but studying the
contents of the library directly is often unavoidable. Lean's standard
library can be found online, on github:
#+BEGIN_QUOTE
[[https://github.com/leanprover/lean/tree/master/library]]
#+END_QUOTE
You can see the contents of the directories and files using github's
browser interface. If you have installed Lean on your own computer,
you can find the library in the =lean= folder, and explore it
with your file manager. Comment headers at the top of each file
provide additional information.

Lean's library developers follow general naming guidelines to make it
easier to guess the name of a theorem you need, or to find it using
tab completion in Emacs' Lean mode, which is discussed in the next
section. Identifiers are generally =snake_case=, which is to say, they
are composed of words written in lower case separated by
underscores. For the most part, we rely on descriptive names. Often
the name of theorem simply describes the conclusion:
#+BEGIN_SRC lean
open nat

check succ_ne_zero
check @mul_zero
check @mul_one
check @sub_add_eq_add_sub
check @le_iff_lt_or_eq
#+END_SRC
If only a prefix of the description is enough to convey the meaning,
the name may be made even shorter:
#+BEGIN_SRC lean
open nat

-- BEGIN
check @neg_neg
check pred_succ
-- END
#+END_SRC
Sometimes, to disambiguate the name of theorem or better convey the
intended reference, it is necessary to describe some of the
hypotheses. The word "of" is used to separate these hypotheses:
#+BEGIN_SRC lean
check @nat.lt_of_succ_le
check @lt_of_not_ge
check @lt_of_le_of_ne
check @add_lt_add_of_lt_of_le
#+END_SRC

# TODO: add this when we have these names
# 
# Sometimes abbreviations or alternative descriptions are easier to work
# with. For example, we use `pos`, `neg`, `nonpos`, `nonneg` rather than
# `zero_lt`, `lt_zero`, `le_zero`, and `zero_le`.
# #+BEGIN_SRC lean
# check mul_pos
# check mul_nonpos_of_nonneg_of_nonpos
# check add_lt_of_lt_of_nonpos
# check add_lt_of_nonpos_of_lt
# #+END_SRC

Sometimes the word "left" or "right" is helpful to describe variants
of a theorem.
#+BEGIN_SRC lean
check @add_le_add_left
check @add_le_add_right
#+END_SRC

# TODO: add these
# check le_of_mul_le_mul_left
# check le_of_mul_le_mul_right

# TODO: add this when we have these names
# We can also use the word "self" to indicate a repeated argument:
# #+BEGIN_SRC lean
# check mul_inv_self
# check neg_add_self
# #+END_SRC

# TODO: add chapter reference
Remember that identifiers in Lean can be organized into hierarchical
namespaces. For example, the theorem named =lt_of_succ_le= in the
namespace =nat= has full name =nat.lt_of_succ_le=, but the shorter
name is made available by the command =open nat=. We will see later on
that defining structures and inductive data types in Lean generates
associated operations, and these are stored in a namespace with the
same name as the type under definition. For example, the product type
comes with the following opens:
#+BEGIN_SRC lean
check @prod.mk
check @prod.fst
check @prod.snd
check @prod.rec
#+END_SRC
The first is used to construct a pair, whereas the next two,
=prod.fst= and =prod.snd=, project the two elements. The last,
=prod.rec=, provides another mechanism for defining functions on a
product in terms of a function on the two components. Names like
=prod.rec= are /protected/, which means that one has to use the full
name even when the =prod= namespace is open.

With the propositions as types correspondence, it then makes sense
that operations that construct, destruct, and otherwise make use of
propositions are also grouped intro namespaces. We have already seen
that this is the case with the logical connectives:
#+BEGIN_SRC lean
check @and.intro
check @and.elim
check @and.left
check @and.right
check @or.inl
check @or.inr
check @or.elim
check @exists.intro
check @exists.elim
check @eq.refl
check @eq.subst
#+END_SRC
But it also applies to predicates and relations that can be introduced
and eliminated in similar ways.
#+BEGIN_SRC lean
check @le.refl
#+END_SRC

# TODO: add these when available
# check @le.dest
# check @le.elim
# check @dvd.intro
# check @dvd.dest
# check @dvd.elim


** Emacs' Lean Mode

This tutorial is designed to be read alongside Lean's web-browser
interface, which runs a Javascript-compiled version of Lean inside
your web browser. But there is a much more powerful interface to Lean
that runs as a special mode in the Emacs text editor. This section
describes some of the advantages and features of the Emacs interface.

If you have never used the Emacs text editor before, you should spend
some time experimenting with it. Emacs is an extremely powerful text
editor, but it can also be overwhelming. There are a number of
introductory tutorials on the web. See, for example:
- [[http://www.gnu.org/software/emacs/tour/][A Guided Tour of Emacs]]
- [[http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/][Absolute Beginner's Guide to Emacs]]
- [[http://www.ucs.cam.ac.uk/docs/course-notes/unix-courses/earlier/Emacs/files/course.pdf][Introduction to Emacs Course (PDF)]]

You can get pretty far simply using the menus at the top of the
screen for basic editing and file management. Those menus list
keyboard-equivalents for the commands. Notation like "C-x", short for
"control x," means "hold down the control key while typing x." The
notation "M-x", short for "Meta x," means "hold down the Alt key while
typing x," or, equivalently, "press the Esc key, followed by x." For
example, the "File" menu lists "C-c C-s" as a keyboard-equivalent for
the "save file" command.

There are a number of benefits to using the native version of Lean
instead of the web interface. Perhaps the most important is file
management. The web interface imports the entire standard library
internally, which is why some examples in this tutorial have to put
examples in a namespace, =hide=, to avoid conflicting with objects
already defined in the standard library. Moreover, the web interface
only operates on one file at a time. Using the Emacs editor, you can
create and edit Lean theory files anywhere on your file system, as
with any editor or word processor. From these files, you can import
pieces of the library at will, as well as your own theories, defined
in separate files.

To use the Emacs with Lean, you simply need to create a file with the
extension ".lean" and edit it. For example, you can create a file by
typing =emacs my_file.lean= in a terminal window, in the directory
where you want to keep the file. Assuming everything has been
installed correctly, Emacs will start up in Lean mode, already
checking your file in the background.

You can then start typing, or copy any of the examples in this
tutorial. (In the latter case, make sure you include the =import= and
=open= commands that are sometimes hidden in the text.) Lean mode
offers syntax highlighting, so commands, identifiers, and so on are
helpfully color-coded. Any errors that Lean detects are subtly
underlined in red, and the editor adds an annotation to the left
margin at lines where errors occur. As you continue to type and
eliminate errors, these annotations magically disappear.

If you put the cursor on a highlighted error, Emacs displays the error
message in at the bottom of the frame. Alternatively, if you type =C-c
! l= while in Lean mode, Emacs opens a new window with a list of
compilation errors. Lean relies on an Emacs package, /Flycheck/, for this
functionality, as evidenced by the letters "FlyC" that appear in the
Emacs information line. An asterisk next to these letters indicates
that Flycheck is actively checking the file, using Lean. Flycheck
offers a number of commands that begin with =C-c !=. For example, =C-c
! n= moves the cursor to the next error, and =C-c ! p= moves the
cursor to the previous error. You can get to a help menu that lists
these key bindings by clicking on the "FlyC" tag.

It may be disconcerting to see a perfectly good proof suddenly "break"
when you change a single character. Moreover, changes can introduce
errors downstream. But the error messages vanish quickly when
correctness is restored. Lean is quite fast. It uses multiple cores to
process a file, and caches previous work to speed up compilation. As a
result, changes you make are registered almost instantaneously.

It is often inconvenient to have to put the cursor on a highlighted
identifier to see an error message or the outcome of a =print= or
=check= command. The keystrokes =C-c C-n= toggle =Lean-Next-Error=
mode, in which the next message (or all the messages that occur on the
line that the cursor is on, if there are any) appears in a buffer
named =*lean-info*=. You can position this window anywhere you want
using Emacs commands to splitting windows and loading
buffers. Pressing =C-c C-n= again toggles the mode off.

The Emacs Lean mode also maintains a continuous dialog with the
background Lean server and uses it to present useful information to
you. For example, if you put your cursor on any identifier --- a
theorem name, a defined symbol, or a variable --- Emacs displays its
type in the information line at the bottom. 

# TODO: this is no longer true. Delete?

# If you put the cursor
# on the opening parenthesis of an expression, Emacs displays the type
# of the expression.

# This works even for implicit arguments. If you put your cursor on an
# underscore symbol, then, assuming Lean's elaborator was successful in
# inferring the value, Emacs shows you that value and its type. Typing
# "C-c C-f" replaces the underscore with the inferred value. 

The Lean mode supports tab completion. In a context where Lean expects
an identifier (e.g. a theorem name or a defined symbol), if you start
typing and then hit the tab key, a popup window suggests possible
matches or near-matches for the expression you have typed. This helps
you find the theorems you need without having to browse the
library. 

# TODO: this is no longer true. Delete?
# You can also press tab after an =import= command, to see a
# list of possible imports, or after the =set_option= command, to see a
# list of options.

# TODO: this is no longer true. Delete?
# If you put your cursor on an identifier and type "C-c C-p", Lean
# prints the definition of that identifier in a separate buffer. 

If you put your cursor on an identifier
and hit =M-.=, Emacs will take you to the identifier's
definition, whether it is in the same file, in another file in the
project (see [[#Object_Files_and_Projects][Section 6.5]] below), or in the library.

# TODO: this is no longer true. Delete? 
# This works even in
# an autocompletion popup window: if you start typing an identifier,
# press the tab key, choose a completion from the list of options, and
# press =M-.=, you are taken to the symbol's definition.

In tactic mode, if you put your cursor on a tactic (or the keyword
=begin= or =end=) and type =C-c C-g=, Emacs will show you the goal in
the =*lean-info*= buffer. Here is another useful trick: if you see
some notation in a Lean file and you want to know how to enter it from
the keyboard, put the cursor on the symbol and type =C-c C-k=.

Recall that typing an underscore in an expression asks Lean to infer a
suitable value for the expression and fill it in automatically. In
cases where Lean is unable to determine a value for the argument, the
underscore is highlighted, and the error message indicates the type of
the "hole" that needs to be filled. This can be extremely useful when
constructing proofs incrementally. One can start typing a "proof
sketch," using either =sorry= or an underscore for details you intend
to fill in later. Assuming the proof is correct modulo these missing
pieces of information, the error message at an unfilled underscore
tells you the type of the term you need to construct, typically an
assertion you need to justify.

# TODO: no longer 
# When you are done, pressing "M-*" takes you back to your original
# position.

The Emacs Lean-mode commands are summarized in the online documentation:
#+BEGIN_QUOTE
[[https://github.com/leanprover/lean/blob/master/src/emacs/README.md]]
#+END_QUOTE

# TODO: make sure online documentation is up to date.

# TODO: should this be necessary?
# If for some reason the Lean background process does not seem to be
# responding (for example, the information line no longer shows you type
# information), type "C-c C-r", or "M-x lean-server-restart-process", or
# choose "restart lean process" from the Lean menu, and with luck that
# will set things right again.

This is a good place to mention another trick that is sometimes useful
when editing long files. In Lean, the =exit= command halts processing
of the file abruptly. If you are making changes at the top of a
long file and want to defer checking of the remainder of the file
until you are done making those changes, you can temporarily insert an
=exit=.

** Imports, Object Files, and Projects
:PROPERTIES:
  :CUSTOM_ID: Object_Files_and_Projects
:END:

At this point, it will be helpful to convey more information about the
inner workings of Lean. A =.lean= file (read "dot Lean") consists of
instructions that tell Lean how to construct formal terms in dependent
type theory. Processing this file is a matter of filling in missing
or implicit information, constructing the relevant terms, and sending
them to the type checker to confirm that they are well-formed and have
the specified types. This is analogous to the compilation process for
a programming language: the =.lean= file contains the source code that
is then compiled down to machine representations of the desired formal
objects. Lean stores the output of the compilation process in files
with the extension =.olean=, for "object Lean".

Assuming the directory that contains Lean is in your system path, you
can run lean on a file =foo.lean= from a system command line by typing
=lean foo.lean=. If =foo= imports other files, by default Lean looks for
these in the standard library, which it finds relative to the
directory from which it was invoked, and the current directory. You
can change the default or add additional directories by specifying the
search paths in the =LEAN_PATH= environment variable. You can specify
subdirectories using periods in the module name: for example, =import
foo.bar.baz= looks for the file "foo/bar/baz.olean" relative to any of
the locations listed in the search path. A leading period, as in
=import .foo.bar=, indicates that the .olean file in question is
specified relative to the current directory. Two leading periods, as
in =import ..foo.bar=, indicates that the address is relative to the
parent directory, and so on.

When processing =foo=, Lean uses any =.olean= files it can find for
the imports as long as they are up to date with the source
file. Otherwise, it recursively compiles the dependencies when
necessary. Of course, it is more efficient if it can use the =.olean=
files. The command =lean --make foo.lean= not only compiles =foo= but saves
the results in =foo.olean=. The command =lean --make= without any
arguments will compile all the files in the current directory.

One often wants to create complex projects and arrange the source
files in nested directories. You can get Lean to recognize the
presence of such a project by putting a file named =.project= in the
root directory. The contents of the file are ignored; the file serves
only as a marker. (On variants of Unix, you can create an empty file
by typing =touch .project= at a shell prompt.) When you type =lean
--make=, Lean recursively searches all the parent directories in
search of a =.project= file, and, if it finds one, it interprets the
command as an instruction to build =.olean= files for all the files
in the project.

The same considerations hold when running Lean from Emacs. Emacs
starts a background Lean process in a special server mode that not
only checks files and provides the messages you see in Flycheck, but
also responds to other queries for information. Lean processes the
current file in the background, giving highest priority to theorems
that are visible in the buffer, and updating compilation tasks as you
continue to type. Otherwise, the process is the same as command-line
compilation: Lean uses =.olean= files when they are available and up
to date, and compiles imports recursively when necessary.

In fact, the Lean mode in Emacs starts a separate copy of the Lean
server for each project being edited. As a result, if you are
editing files =a.lean= and =b.lean=, and =b.lean= depends on =a.lean=,
then whenever you make a change in =b.lean= the result is visible to
=a.lean=. 

Changes are not immediately available across projects,
however. Suppose you have a project =foo= that depends on another
project =bar= and you are editing both. If you want the changes in
=bar= to be available to =foo=, simply save all the files in =bar=,
switch to any file in =foo=, and either type =C-c C-r= or choose the
corresponding Lean menu option to restart the Lean server. At that
point, the server for =foo= will detect and use the new version of
=bar=.

# TODO: should there be a command to update all the .olean files in a
# project from within Emacs? Or should we at least encourage the user
# to build the .olean files?


** Notation and Abbreviations
:PROPERTIES:
  :CUSTOM_ID: Notation_and_Abbreviations
:END:

Lean's parser is an instance of a Pratt parser, a non-backtracking
parser that is fast and flexible. You can read about Pratt parsers in
a number of places online, such as here:
#+BEGIN_QUOTE
[[http://en.wikipedia.org/wiki/Pratt_parser]]
[[http://eli.thegreenplace.net/2010/01/02/top-down-operator-precedence-parsing]]
#+END_QUOTE
Identifiers can include any alphanumeric characters, including Greek
characters (other than Π , Σ , and λ , which, as we have seen, have a
special meaning in the dependent type theory). They can also include
subscripts, which can be entered by typing =\_= followed
by the desired subscripted character.

Lean's parser is moreover extensible, which is to say, we can define
new notation.
#+BEGIN_SRC lean
notation `[` a `**` b `]` := a * b + 1

definition mul_square (a b : ℕ) := a * a * b * b

infix `<*>`:50 := mul_square

eval [2 ** 3]
eval 2 <*> 3
#+END_SRC
In this example, the =notation= command defines a complex binary
notation for multiplying and adding one. The =infix= command declares
a new infix operator, with precedence 50, which associates to the
left. (More precisely, the token is given left-binding power 50.) The
command =infixr= defines notation which associates to the right,
instead.

If you declare these notations in a namespace, the notation is only
available when the namespace is open. You can declare temporary notation
using the keyword =local=, in which case the notation is available
in the current file, and moreover, within the scope of the current
=namespace= or =section=, if you are in one.
#+BEGIN_SRC lean
-- BEGIN
local notation `[` a `**` b `]` := a * b + 1
local infix `<*>`:50 := λ a b : ℕ, a * a * b * b
-- END
#+END_SRC

The file =reserved_notation.lean= in the =init= folder of the library
declares the left-binding powers of a number of common symbols that
are used in the library.
#+BEGIN_QUOTE
https://github.com/leanprover/lean/blob/master/library/init/reserved_notation.lean
#+END_QUOTE
You are welcome to overload these symbols for your own use, but you
cannot change their right-binding power.

Remember that you can direct the pretty-printer to suppress notation
with the command =set_option pp.notation false=.  You can also declare
notation to be used for input purposes only with the =[parsing_only]=
attribute:
#+BEGIN_SRC lean
notation [parsing_only] `[` a `**` b `]` := a * b + 1

variables a b : ℕ
check [a ** b]
#+END_SRC
The output of the =check= command displays the expression as =a * b +
1=. Lean also provides mechanisms for iterated notation, such as =[a,
b, c, d, e]= to denote a list with the indicated elements. See the
discussion of =list= in the next chapter for an example.


# TODO(Jeremy): this is as far as I got.

# Notation in Lean can be /overloaded/, which is to say, the same
# notation can be used for more than one purpose. In that case, Lean's
# elaborator will try to disambiguate based on context. For example, we
# have already seen that with the =eq.ops= namespace open, the inverse
# symbol can be used to denote the symmetric form of an equality. It can
# also be used to denote the multiplicative inverse:
# #+BEGIN_SRC lean
# import data.rat
# open rat eq.ops

# variable r : ℚ

# check r⁻¹             -- ℚ
# check (eq.refl r)⁻¹   -- r = r
# #+END_SRC
# Insofar as overloads produce ambiguity, they should be used
# sparingly. We avoid the use of overloads for arithmetic operations
# like =+=, =*=, =-=, and =/= by using /type classes/, as described in
# Chapter [[file:09_Type_Classes.org::#Type_Classes][Type Classes]]. In the following, the addition operation denotes
# a general algebraic operation that can be instantiated to =nat= or
# =int= as required:
# #+BEGIN_SRC lean
# import data.nat data.int
# open algebra nat int

# variables a b : int
# variables m n : nat

# check a + b    -- ℤ
# check m + n    -- ℕ
# print notation +
# #+END_SRC
# This is sometimes called /parametric polymorphism/, in contrast to /ad
# hoc polymorphism/, which we are considering here. For example, the
# notation =++= is used to concatenate both lists and vectors:
# #+BEGIN_SRC lean
# import data.list data.tuple
# open list tuple

# variables (α : Type) (m n : ℕ)
# variables (v : tuple α m) (w : tuple α n) (s t : list α)

# check s ++ t
# check v ++ w
# #+END_SRC
# Where it is necessary to disambiguate, Lean allows you to precede an
# expression with the notation =#<namespace>= to specify the namespace 
# in which notation is to be interpreted. 
# #+BEGIN_SRC lean
# import data.list data.tuple
# open list tuple

# variables (α : Type) (m n : ℕ)
# variables (v : tuple α m) (w : tuple α n) (s t : list α)

# -- BEGIN 
# check (#list λ x y, x ++ y)
# check (#tuple λ x y, x ++ y)
# -- END
# #+END_SRC

# Lean provides an =abbreviation= mechanism that is similar to the
# notation mechanism.
# #+BEGIN_SRC lean
# import data.nat
# open nat

# abbreviation double (x : ℕ) : ℕ := x + x

# theorem foo (x : ℕ) : double x = x + x := rfl
# check foo
# #+END_SRC
# An abbreviation is a transient form of definition that is expanded as
# soon as an expression is processed. As with notation, however, the
# pretty-printer re-constitutes the expression and prints the type of
# =foo= as =double x = x + x=. As with notation, you can designate
# an abbreviation to be =[parsing-only]=, and you can direct the
# pretty-printer to suppress their use with the command =set_option
# pp.notation false=. Finally, again as with notation, you can limit
# the scope of an abbreviation by prefixing the declarations with the
# =local= modifier.

# As the name suggests, abbreviations are intended to be used as
# convenient shorthand for long expressions. One common use is to
# abbreviate a long identifier:
# #+BEGIN_SRC lean
# definition my_long_identity_function {α : Type} (x : α) : α := x
# local abbreviation my_id := @my_long_identity_function
# #+END_SRC

# ** Coercions
# :PROPERTIES:
#   :CUSTOM_ID: Coercions
# :END:

# Lean also provides mechanisms to automatically insert /coercions/
# between types. These are user-defined functions between datatypes that
# make it possible to "view" one datatype as another. For example, any 
# natural number can be coerced to an integer.
# #+BEGIN_SRC lean
# import data.nat data.int
# open nat int

# variables a b : int
# variables m n : nat

# -- BEGIN
# check m + n          -- m + n : ℕ
# check a + n          -- a + n : ℤ
# check n + a          -- n + a : ℤ
# check (m + n : ℤ)    -- m + n : ℤ

# set_option pp.coercions true

# check m + n          -- m + n : ℕ
# check a + n          -- a + of_nat n : ℤ
# check n + a          -- of_nat n + a : ℤ
# check (m + n : ℤ)    -- of_nat (m + n) : ℤ
# -- END
# #+END_SRC
# Setting the option =pp.coercions= to =true= makes the coercions
# explicit. Coercions that are declared in a namespace are only
# available to the system when the namespace is opened. The notation
# =(t : T)= constrains Lean to find an interpertation of =t= which gives
# it a type that is definitionally equal to =T=, thereby allowing you to
# specify the interpretation of =t= you have in mind. Thus checking
# =(m + n : ℤ)= forces the insertion of a coercion.

# Here is an example of how we can define a coercion from the booleans
# to the natural numbers.
# #+BEGIN_SRC lean
# import data.bool data.nat
# open bool nat

# definition bool.to_nat [coercion] (b : bool) : nat :=
# bool.cond b 1 0

# eval 2 + ff
# eval 2 + tt
# eval tt + tt + tt + ff

# print coercions        -- show all coercions
# print coercions bool   -- show all coercions from bool
# #+END_SRC
# The tag "coercion" is an /attribute/ that is associated with the
# symbol =bool.to_nat=. It does not change the meaning of
# =bool.to_nat=. Rather, it associates additional information to the
# symbol that informs Lean's elaboration algorithm, as discussed in
# Section [[file:08_Building_Theories_and_Proofs.org::#Elaboration_and_Unification][Elaboration and Unification]]. We could also declare
# =bool.to_nat= to be a coercion after the fact as follows:
# #+BEGIN_SRC lean
# import data.bool data.nat
# open bool nat

# -- BEGIN
# definition bool.to_nat (b : bool) : nat :=
# bool.cond b 1 0

# attribute bool.to_nat [coercion]
# -- END
# eval 2 + ff
# eval 2 + tt
# eval tt + tt + tt + ff
# #+END_SRC
# In both cases, the scope of the coercion is the current namespace, so
# the coercion will be in place whenever the module is imported and the
# namespace is open. Sometimes it is useful to assign an attribute only
# temporarily. The =local= modifier ensures that the declaration is only
# in effect in the current file, and within the current namespace or
# section:
# #+BEGIN_SRC lean
# import data.bool data.nat
# open bool nat

# -- BEGIN
# definition bool.to_nat (b : bool) : nat :=
# bool.cond b 1 0

# local attribute bool.to_nat [coercion]
# -- END
# #+END_SRC

# Overloads and coercions introduce "choice points" in the elaboration
# process, forcing the elaborator to consider multiple options and
# backtrack appropriately. This can slow down the elaboration
# process. What is more problematic is that it can make error messages
# less informative: Lean only reports the result of the last
# backtracking path, which means the failure that is reported to the
# user may be due to the wrong interpretation of an overload or
# coercion. This is why Lean provides mechanism for namespace
# management: parsing and elaboration go more smoothly when we only
# import the notation that we need.

# Nonetheless, overloading is quite convenient, and often causes no
# problems. There are various ways to manually disambiguate an
# expression when necessary. One is to precede the expression with the
# notation =#<namespace>=, to specify the namespace in which notation is
# to be interpreted. Another is to replace the notation with an explicit
# function name. Yet a third is to use the =(t : T)= notation to indicate
# the intended type.

# #
# # #+BEGIN_SRC lean
# # import data.nat data.int
# # open nat int

# # check 2 + 2
# # eval 2 + 2

# # check #nat 2 + 2
# # eval #nat 2 + 2

# # check #int 2 + 2
# # eval #int 2 + 2

# # check nat.add 2 2
# # eval nat.add 2 2

# # check int.add 2 2
# # eval int.add 2 2

# # check (2 + 2 : nat)
# # eval (2 + 2 : nat)

# # check (2 + 2 : int)
# # eval (2 + 2 : int)

# # check 0

# # check nat.zero

# # check (0 : nat)
# # check (0 : int)
# # #+END_SRC
